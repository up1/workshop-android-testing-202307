apply plugin: 'jacoco'

tasks.create(name: "testCoverageReport", type: JacocoReport, dependsOn: ["testMockedDebugUnitTest", "createMockedDebugCoverageReport"]) {
    group = "Verification" // existing group containing tasks for generating linting reports etc.
    description = "Generate Jacoco coverage reports for the 'local' debug build."

    reports {
        html.required = true
        // human readable (written into './build/reports/jacoco/unitTestCoverageReport/html')
        xml.required = true
        // CI-readable (written into './build/reports/jacoco/unitTestCoverageReport/unitTestCoverageReport.xml')
    }

    // Execution data generated when running the tests against classes instrumented by the JaCoCo agent.
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "outputs/unit_test_code_coverage/mockedDebugUnitTest/*.exec",
            "outputs/code_coverage/mockedDebugAndroidTest/connected/*/*.ec"
    ])

    // Compiled Kotlin class files are written into build-variant-specific subdirectories of 'build/tmp/kotlin-classes'.
    // JaCoCo execution data is a record of the (offsets of?) executed bytecode instructions which are looked up in the class files.
    classDirectories.from = "${project.buildDir}/tmp/kotlin-classes/mockedDebug"

    // To produce an accurate report, the bytecode is mapped back to the original source code.
    sourceDirectories.from = "${project.projectDir}/src/main/java"
}

// Necessary for coverage to be collected for tests executed by 'RobolectricTestRunner'.
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}